{"google":"dex-gh-pages-home","body":"Dex, the Index Bot\r\n--------\r\n\r\nDex is a MongoDB performance tuning tool that compares  queries to the\r\navailable indexes in the queried collection(s) and generates index suggestions\r\nbased on simple heuristics. Currently you must provide a connection URI for\r\nyour database.\r\n\r\nDex uses the URI you provide as a helpful way to determine when an index is\r\nrecommended. Dex does not take existing indexes into account when actually\r\nconstructing its ideal recommendation.\r\n\r\nCurrently, Dex only recommends complete indexes, not partial indexes. Dex\r\nignores partial indexes that may be used by the query in favor of a better\r\nindex, if one is not found. Dex recommends partially-ordered indexes according\r\nto a rule of thumb:\r\n\r\nYour index field order should first answer:\r\n\r\n1. Equivalent value checks\r\n2. Sort clauses\r\n3. Range value checks ($in, $nin, $lt/gt, $lte/gte, etc.)\r\n\r\nNote that your data cardinality may warrant a different order than the suggested\r\nindexes.\r\n\r\nUsage\r\n--------\r\n\r\n### Common\r\nRun Dex on a log file and provide a URI (with auth credentials, if any) to the\r\ncorresponding database.\r\n\r\n```\r\n> dex -f my/mongod/data/path/mongodb.log mongodb://myUser:myPass@myHost:12345/myDb\r\n```\r\n\r\nOr, run Dex on a populated MongoDB system.profile collection. It is recommended\r\nthat you run db.enableProfilingLevel(1), and wait until a representative set of\r\nqueries/operations have been run on the database. Then run db.setProfilingLevel(0)\r\nto stop profiling. Then, run Dex:\r\n\r\n```\r\n> dex -p mongodb://myUser:myPass@myHost:12345/myDb\r\n```\r\n\r\nNote: Because Dex is chiefly concerned with un-indexed queries, Dex output should not\r\nbe affected by the additional data produced by profiling level 2. However, Dex may\r\ntake longer to run.\r\n\r\n### Filtered\r\nDex also supports filtering this analysis by specific collections and databases.\r\nNote that when you intend to analyze multiple databases you must provide a\r\nconnection URI for the admin database.\r\n\r\n```\r\n> dex -f my/mongod/data/path/mongodb.log -n \"myFirstDb.collectionOne\" mongodb://myUser:myPass@myHost:12345/myFirstDb\r\n\r\n> dex -p -n \"*.collectionOne\" mongodb://myUser:myPass@myHost:12345/admin\r\n\r\n> dex -f my/mongod/data/path/mongodb.log -n \"myFirstDb.*\" -n \"mySecondDb.*\" mongodb://myUser:myPass@myHost:12345/admin\r\n```\r\n\r\n### Watch Mode\r\nWhen you provide the -w/--watch argument, Dex does not process the full logfile\r\nor any existing contents in the system.profile collection. Instead, Dex evaluates\r\nentries as they are logged/profiled. Use a keyboard interrupt (Ctrl+C) to terminate\r\nDex when running in watch mode.\r\n\r\nUse watch mode to obtain running information in real time.\r\n\r\nExample:\r\n\r\n```\r\n> dex -w -f my/mongod/data/path/mongodb.log mongodb://myUser:myPass@myHost:12345/myDb\r\n```\r\n\r\nNote that Dex still caches its suggestions, so each unique recommendation will\r\nonly print once.\r\n\r\nWhen using -w/--watch with -p/--profile to watch the system.profile collection,\r\nyou must currently filter your focus to one database by providing a namespace\r\nargument of the form -n \"[db_name].*\"\r\nFor Example:\r\n\r\n```\r\n> dex -w -p -n \"myDb.*\" mongodb://myUser:myPass@myHost:12345/myDb\r\n```\r\n\r\nIn addition, if profiling is not enabled, Dex will enable profile level 1 for\r\nthe duration of its operation.\r\n\r\n### Help Contents\r\n\r\n```\r\nUsage: dex [<options>] uri\r\n\r\nScans a provided MongoDB log file or profile collection and uses the provided\r\nURI to compare queries found in the logfile or profile collection to the indexes\r\navailable in the database, recommending indexes for those  queries which are not\r\nindexed. Recommended for MongoDB version 2.0.4 or later.\r\n\r\n\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  -f LOGFILE_PATH, --file LOGFILE_PATH\r\n                        path to a MongoDB log file. If provided, the file will\r\n                        be searched for queries.\r\n  -p, --profile         flag to examine the MongoDB system.profile collection.\r\n                        If set, the profile collection will be searched for\r\n                        queries.\r\n  -w, --watch           Instructs Dex to watch the system.profile or log\r\n                        (depending on which -p/-f is specified) for entries,\r\n                        rather than processing existing content. Upon keyboard\r\n                        interrupt (Ctrl+C) watch terminates and the\r\n                        accumulated output is provided.\r\n  -n NAMESPACES, --namespace NAMESPACES\r\n                        a MongoDB namespace (db.collection). Can be provided\r\n                        multiple times. This option creates a filter, and\r\n                        queries not in the provided namespace(s) will not be\r\n                        analyzed. Format: -n ('db.collection' | '*' | 'db.*' |\r\n                        'collection'). '*.*' and '*.collection' are redundant\r\n                        but also supported. An asterisk is shorthand for 'all'\r\n                        --actual regexes are not supported. Note that -n '*'\r\n                        is equivalent to not providing a -n argument.\r\n  -v, --verbose         enables provision of additional output information,\r\n                        including Dex's query and index analysis structures.\r\n```\r\n\r\nRequirements\r\n--------\r\n\r\nDex is designed to comprehend logs and profile collections for mongod 2.0.4 or later.\r\n\r\nLibraries:\r\n* pyyaml\r\n* pymongo\r\n* dargparse\r\n\r\nInstallation\r\n--------\r\n\r\n```\r\n> pip install dex\r\n```\r\n\r\nTesting\r\n--------\r\n\r\nTo run Dex's unit test suite, you must bring up a mongodb server on 27017. Dex\r\nwill use create the dex_test db and drop it when the tests are complete.\r\n\r\n```\r\n> python -m dex.test.test\r\n```\r\n\r\nOutput\r\n--------\r\n\r\n### Default\r\nBy default, Dex outputs each unique recommendation. A recommendation includes a\r\ndb name, index command, and the fields from the query that prompted the\r\nrecommendation. Dex concludes a run with a list of run statistics, including:\r\n* Total lines read - Total number of lines in the input file\r\n* Understood query lines - Number of lines successfully parsed by the LogParser. \r\n  For the average case, this line is expected to be somewhat low compared to\r\n  Total Lines Read.\r\n* Unique recommendations - Number of unique recommendations found for all\r\n  understood query lines\r\n* Lines impacted by recommendations - Total number of understood lines that\r\n  generated recommendations.\r\n\r\n#### Runtime Output to STDERR\r\n\r\nDex provides runtime output as it processes. In default mode, Dex outputs each\r\nunique recommendation it generates, and concludes with run statistics. Each\r\nrecommendation includes the following fields:\r\n\r\n* namespace - The db.collection name.\r\n* index - A json string describing the recommended index.\r\n* shellCommand - A helpful cut-and-paste command to create the index from\r\n  the MongoDB shell.\r\n\r\nSample: \r\n```\r\n...\r\n{\r\n    \"index\": \"{'simpleIndexedField': 1, 'simpleUnindexedFieldThree': 1}\", \r\n    \"namespace\": \"dex_test.test_collection\" \r\n    \"shellCommand\": \"db.test_collection.ensureIndex({'simpleIndexedField': 1, 'simpleUnindexedFieldThree': 1}, {'background': true})\"\r\n}\r\n...\r\nTotal lines read: 7\r\nUnderstood query lines: 7\r\nUnique recommendations: 5\r\nLines impacted by recommendations: 5\r\n```\r\n\r\n#### Final Output to STDOUT\r\n\r\nDex returns a JSON document containing runtime statistics and each unique\r\nrecommendation.\r\n\r\nSample:\r\n```\r\n{\r\n    \"linesPassed\": 7, \r\n    \"linesRecommended\": 5, \r\n    \"results\": [\r\n        {\r\n            \"index-json\": \"{'simpleUnindexedField': 1}\", \r\n            \"shell-command\": \"db.test_collection.ensureIndex({'simpleUnindexedField': 1}, {'background': true})\", \r\n            \"namespace\": \"dex_test.test_collection\" \r\n        }, \r\n       ...\r\n    ], \r\n    \"uniqueRecommendations\": 5, \r\n    \"linesProcessed\": 7\r\n}\r\n```\r\n\r\n### Verbose\r\nWhen -v/--verbose is specified, Dex outputs the full query report for each\r\nunique recommendation, including:\r\n\r\n* namespace - The db.collection name.\r\n* rawFields - Raw fields extracted from the query\r\n* queryAnalysis - Provides basic information about the query, such as\r\n  fieldCount), as well as the analyzed type of each field. 'suppported' is\r\n  False when the query contains an UNSUPPORTED field.\r\n* indexAnalysis - Shows which indexes cover the query (either in full\r\n  or partially), and whether or not the analysis shows room for improvement.\r\n  For each index, the following information is available:\r\n\r\n  idealOrder - Is the index sorted according to Dex's internal heuristic.\r\n\r\n  queryFieldsCovered - Number of query fields the index services.\r\n\r\n  coverage - Indexes with a coverage of 'none' are not output. 'partial'\r\ncoverage indicates that (0 < query-fields-covered < total-query-fields).\r\n'full' coverage indicates that (query-fields-covered == total-query-fields).\r\n\r\n  supported - Indicates that the index is not of an unsupported type (such as 2d)\r\n\r\n  index - The mongodb-provided document describing the index.\r\n\r\n* parsed - The raw query as read by Dex's LogParser.\r\n* recommendation - The recommendation itself (as described in Default Output\r\n  above)\r\n\r\nSample:\r\n\r\n```\r\n...\r\n{\r\n    \"indexAnalysis\": {\r\n        \"needsRecommendation\": true, \r\n        \"fullIndexes\": [], \r\n        \"partialIndexes\": [\r\n            {\r\n                \"index\": {\r\n                    \"key\": [\r\n                        [\r\n                            \"simpleIndexedField\", \r\n                            1\r\n                        ]\r\n                    ], \r\n                    \"v\": 1\r\n                }, \r\n                \"supported\": true, \r\n                \"coverage\": \"partial\", \r\n                \"idealOrder\": true, \r\n                \"queryFieldsCovered\": 1\r\n            }\r\n        ]\r\n    }, \r\n    \"parsed\": {\r\n        \"ns\": \"dex_test.test_collection\", \r\n        \"query\": {\r\n            \"simpleIndexedField\": \"value\"\r\n        }, \r\n        \"orderby\": {\r\n            \"simpleUnindexedFieldThree\": -1\r\n        }, \r\n        \"findandmodify\": \"test_collection\", \r\n        \"update\": {\r\n            \"$set\": {\r\n                \"something\": \"somethingelse\"\r\n            }\r\n        }\r\n    }, \r\n    \"recommendation\": {\r\n        \"index\": \"{'simpleIndexedField': 1, 'simpleUnindexedFieldThree': 1}\", \r\n        \"namespace\": \"dex_test.test_collection\",\r\n        \"shellCommand\": \"db.test_collection.ensureIndex({'simpleIndexedField': 1, 'simpleUnindexedFieldThree': 1}, {'background': true})\"\r\n    }, \r\n    \"namespace\": \"dex_test.test_collection\",\r\n    \"queryAnalysis\": {\r\n        \"fieldCount\": 2, \r\n        \"supported\": true, \r\n        \"analyzedFields\": [\r\n            {\r\n                \"fieldName\": \"simpleIndexedField\", \r\n                \"fieldType\": \"EQUIV\"\r\n            }, \r\n            {\r\n                \"fieldName\": \"simpleUnindexedFieldThree\", \r\n                \"fieldType\": \"SORT\", \r\n                \"seq\": 0\r\n            }\r\n        ]\r\n    }\r\n}\r\n...\r\nTotal lines read: 7\r\nUnderstood query lines: 7\r\nUnique recommendations: 5\r\nLines impacted by recommendations: 5\r\n\r\n```\r\n\r\n### Questions?\r\n\r\nEmail support@mongolab.com","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Dex","tagline":"Index and query analyzer for MongoDB: compares MongoDB log files and index entries to make index recommendations"}